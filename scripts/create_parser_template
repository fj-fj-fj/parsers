#!/usr/bin/env bash
# This scripts generates a structure for nu parser
# and a directory for saving data.
#
# $PROJECT_DIR/data/$1/
# └──  ...
#      * files will be created each time a response is received
#
# $PROJECT_DIR/parsers/user_parsers/$1/
# ├──  __init__.py
# ├──  logic.py
# ├──  constants.py
# ├──  notes.txt
# ├──  parser.py
# └──  samples.txt
#
# The script also starts a code editor at a certain position
# of a $PROJECT_DIR/parsers/user_parsers/$1/constants.py to fix URL


SCRIPT_NAME=$0

# Error codes (/usr/include/asm-generic/errno-base.h)
E2BIG=7
EINVAL=22
ENOTEMPTY=39
E2SMALL=64

USAGE=$(cat << EOT

This script requires exactly one argument DIRECTORY_NAME.

RETURN CODES
    The script has the following return codes:

    0   success
    $E2BIG  Argument list too long
    $EINVAL Invalid argument
    $E2SMALL Argument list too short
    $ENOTEMPTY Directory not empty

USAGE
    $(echo -e "\033[0;33m$SCRIPT_NAME <DIRECTORY_NAME>\033[0m")
EOT
)

if [ ${#} -lt 1 ]; then
    printf '\033[1;31mYou must pass a directory name to create a template!\033[0m\n'
    printf '%s\n\n' "${USAGE}"
    exit $E2SMALL
fi
if [ "${1}" = "-h" ] || [ "${1}" = "--help" ]; then
    printf '%s\n\n' "${USAGE}"
    exit 0
fi
if [ ${#} -gt 1 ]; then
    printf '\033[1;31mYou must pass only one argument!\033[0m\n'
    printf '%s\n\n' "${USAGE}"
    exit $E2BIG
fi

DIR_NAME=$1
PROJECT_DIR="$(realpath -e -- "$(dirname -- "$(dirname -- "${BASH_SOURCE[0]}")")")"
PARSED_DATA_TEMPLATE=$PROJECT_DIR/data/$DIR_NAME
PARSER_TEMPLATE=$PROJECT_DIR/parsers/user_parsers/$DIR_NAME
TRASH_DIR=$PROJECT_DIR/log/trash

function preexec() {
    if [[ "$BASH_COMMAND" = "$1" ]]; then
        eval "$2"
    fi
}

# If templates exist: recreate if needed.
if [ -d "$PARSER_TEMPLATE" ]; then
    REMOVE='rm --recursive --force'
    printf -v CMD '%s %s %s' "$REMOVE" "${PARSED_DATA_TEMPLATE}" "${PARSER_TEMPLATE}"

    mkdir --parents "$TRASH_DIR/$DIR_NAME"/{"$DIR_NAME",data}
    MV_TO_TRASH="cp -pr $PARSER_TEMPLATE/. $TRASH_DIR/$DIR_NAME/$DIR_NAME;
        cp -pr $PARSED_DATA_TEMPLATE/.   $TRASH_DIR/$DIR_NAME/data"

    printf '\033[1;31mTemplate already exists!\033[0m\n'
    printf 'Delete template: \n'
    printf '\033[0;33m  %s %s %s\033[0m\n\n' \
        "${REMOVE}" \
        "${PARSED_DATA_TEMPLATE}" \
        "${PARSER_TEMPLATE}"
    printf '\033[1mType <Ctrl+U> to skip this command or <Enter> to excecute:\033[0m\n'

    read -e -p '$ ' -i "${CMD}" -r command
    trap 'preexec "${CMD}" "${MV_TO_TRASH}"' DEBUG
    eval "$command"

    if [ -d "$PARSER_TEMPLATE" ]; then
        exit $ENOTEMPTY
    fi
fi

mkdir --parents "$PARSED_DATA_TEMPLATE" "$PARSER_TEMPLATE"
touch "$PARSER_TEMPLATE"/{__init__,constants,logic,parser}.py
touch "$PARSER_TEMPLATE"/{notes,samples}.txt

cat <<EOT >> "$PARSER_TEMPLATE"/__init__.py
#!/usr/bin/env python
# mypy: ignore-errors
"""
Modules:
- logic
    'parsers.user_parsers.$DIR_NAME.logic' from './$DIR_NAME/logic.py'
- constatns
    parsers.user_parsers.$DIR_NAME.constants' from './$DIR_NAME/constats.py'
- parser (alias core)
    parsers.user_parsers.$DIR_NAME.parser' from './$DIR_NAME/parser.py'

Functions:
- main
    'parsers.user_parsers.$DIR_NAME.parser.main' function from './$DIR_NAME/parser.py'
- shortcuts
    'parsers.imports.shortcuts.<locals>._shortcuts'
- note
    (lambda) Simple dict-like container
    Use ad-hoc attributes to hodl smth
    Will be automatically saved to ./notes.json

Classes:
- info
    'parsers.imports.ModuleDocstring' instance from './$DIR_NAME/parser.py'
- parser
    'parsers.handlers.Parser' instance from './$DIR_NAME/parser.py'
- samples
    'parsers.datatypes.Sample' list-like instance from './$DIR_NAME/parser.py'

Files:
- ./samples.txt
    File that will contain your samples (strings)
    Will be generated after \`samples.save()\`
- ./notes.txt
    File that will contain your notes (keys:values)
    Will be generated after REPL exiting

"""
from parsers.imports import importcore as _importcore
core = _importcore('$DIR_NAME')

from .parser import info
from .parser import main
from .parser import parser
from .parser import samples


note = lambda: vars(note)  # noqa: E731

# Display parsers.__doc__ if not DEBUG
info *= bool(__import__('os').getenv('DEBUG'))

from parsers.imports import shortcuts
shortcuts = shortcuts(fn=main, nb=note, pa=parser, ss=samples)

from parsers.utils.exit import register_exit_func, save_notes
register_exit_func(save_notes(note, to=core.constloc.PARSED_DIR))
EOT

cat <<EOT >> "$PARSER_TEMPLATE"/constants.py
from types import SimpleNamespace as _namespace

from parsers.constants import Constant as _base

_URL = URL = 'https://$DIR_NAME.com'
$(#                                ^ (Cursor column position)
# The script will end by opening the <code editor> at this point.

exec 9>&1)
# Directory for storing final data
PARSED_DIR = F'{_base.DIR.PARSED_DATA}$DIR_NAME'
# File to store samples for extracting raw data
SAMPLE_FILE = F'{_base.DIR.USER_PARSERS}$DIR_NAME/samples.txt'

PRINT_TO_STDOUT = True

# Checked by \`curl\`=======================================
# The block of code below has been automatically generated
# Delete condition or reasign \`URL\`
if $(
    curl \
    --silent \
    --write-out "%{http_code}" \
    --output >(cat >&9) \
    https://"$DIR_NAME".com
) not in range(200, 400):
    URL = _base.URL.HTTPBIN_ORG
# ========================================================

constant_locals = _namespace(
    base=_base,
    URL=URL,
    PARSED_DIR=PARSED_DIR,
    PRINT_TO_STDOUT=PRINT_TO_STDOUT,
    SAMPLE_FILE=SAMPLE_FILE,
)
EOT

cat <<EOT >> "$PARSER_TEMPLATE"/logic.py
"""Process \`Sample\` here."""
import typing as _t

from parsers.datatypes import Json
from parsers.datatypes import KeyAttrValue

OptionalFinalData: _t._Alias = Json | None


def main(samples: _t.Iterable | KeyAttrValue) -> OptionalFinalData:
    """Handle samples (API).

    \`samples\` (Iterable):
        json as list or list of selectors (XPath, CSS, etc)

    \`samples\` (KeyAttrValue):
        json as dict or Response is not requests.Response

    if data saving is implemented, returns None

    """
EOT

cat <<EOT >> "$PARSER_TEMPLATE"/parser.py
#!/usr/bin/env python
# mypy: ignore-errors
"""
Usage:

    First start writing CSS selectors
    ---------------------------------

    >>> parser.go
    >>> soup.select(<any selector>)
    >>> ss.add(<correct selector>)
    >>> # ... See more EXAMPLE.md
    >>> ss.save()
    >>> q()

    Now that you have a list of samples, just run this parser
    ---------------------------------------------------------

    Find parsed data in $PROJECT_DIR/data/<parser>
    They are yours.

"""
import sys
from pydoc import pager

if is_script := __name__ == '__main__':
    __package__ = 'parsers.user_parsers.$DIR_NAME'
    sys.path.insert(0, sys.path[0] + 3 * '/..')

from ...constants import Constant
from ...datatypes import EXIT_CODE, Sample
from ...handlers import Parser
from ...imports import ModuleDocstring as info, snoop

from .logic import main as sample_handler
from .constants import constant_locals as constloc

URL = constloc.URL or input(Constant.PROMPT.ENTER_URL_OR_FALSE)

samples = Sample(file=constloc.SAMPLE_FILE)
parser = Parser(URL, constloc.PARSED_DIR, samples)


# @snoop
def main(display=constloc.PRINT_TO_STDOUT) -> EXIT_CODE:
    """Parse and save.

    When \`display\` is True, parsed data will down to stdout.
    Return exit code.
    """
    parser.logic = sample_handler
    parsed = parser.go
    if display and not parsed.fail:
        pager(str(parsed.data))
    return parsed.status_code


if is_script and not sys.flags.interactive:
    sys.exit(main())

info = info(__doc__)
EOT

printf "\n\033[0;33mTemplate '%s' created successfully.\033[0m\n\n" "${DIR_NAME}"
tree -p "$PARSER_TEMPLATE"


CONSTANTS_URL="$PROJECT_DIR/parsers/user_parsers/$DIR_NAME/constants.py"
declare -i LINE=5
declare -i CURSOR_COLUMN_POSITION=$((${#DIR_NAME} + 27))
# Start a code editor <file>:<line>:<column> with VSCode or Vim
if command -v code >/dev/null; then
    code --goto "$CONSTANTS_URL":$LINE:"$CURSOR_COLUMN_POSITION"
else
    vim "+call cursor($LINE, $CURSOR_COLUMN_POSITION)" "$CONSTANTS_URL"
fi

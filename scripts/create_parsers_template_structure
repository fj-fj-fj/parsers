#!/usr/bin/env bash
# This scripts generates:
# $PROJECT_DIR/parsers/user_parsers/$1/
# ├──  __init__.py
# ├──  config.py
# ├──  constants.py
# └──  parser.py

# Error codes (from /usr/include/asm-generic/errno-base.h)
E2BIG=7
EINVAL=22
E2SMALL=64

# Usage
SCRIPT_NAME=$0
USAGE=$(cat << EOT

This script requires exactly one argument DIRECTORY_NAME.

RETURN CODES
    The script has the following return codes:

    0   success
    $E2BIG  Argument list too long
    $EINVAL Invalid argument
    $E2SMALL Argument list too short

USAGE
    $(echo -e "\033[0;33m$SCRIPT_NAME <DIRECTORY_NAME>\033[0m")
EOT
)

# Exit conditions
if [ ${#} -lt 1 ] ; then
    printf '\033[1;31mYou must pass a directory name to create a template!\033[0m\n'
    printf '%s\n\n' "${USAGE}"
    exit $E2SMALL
fi
if [ "${1}" = "-h" ] || [ "${1}" = "--help" ] ; then
    printf '%s\n\n' "${USAGE}"
    exit 0
fi
if [ ${#} -gt 1 ] ; then
    printf '\033[1;31mYou must pass only one argument!\033[0m\n'
    printf '%s\n\n' "${USAGE}"
    exit $E2BIG
fi

DIR_NAME=$1
PROJECT_DIR=$PROJECT_DIR
PARSER_TEMPLATE=$PROJECT_DIR/parsers/user_parsers/$DIR_NAME

# Generating parser template
mkdir "$PARSER_TEMPLATE"
touch "$PARSER_TEMPLATE"/{__init__,config,constants,parser}.py

cat <<EOT >> "$PARSER_TEMPLATE"/__init__.py
#!/usr/bin/env python
"""# TODO: docsting."""
from .parser import main
EOT

cat <<EOT >> "$PARSER_TEMPLATE"/config.py
"""# TODO: docstring."""
EOT

cat <<EOT >> "$PARSER_TEMPLATE"/constants.py
"""# TODO: docsting."""

URL = 'https://replaceme'

PARSED_DIR = '$(basename $PROJECT_DIR)/data/$DIR_NAME'
EOT

cat <<EOT >> "$PARSER_TEMPLATE"/parser.py
#!/usr/bin/env python
"""# TODO: docsting."""
import requests
from bs4 import BeautifulSoup

if is_script := __name__ == '__main__':
    __package__ = 'parsers.user_parsers.$DIR_NAME'

    def fix_path():
        '''Fix sys.path and die.'''
        from sys import path
        path.insert(0, path[0] + 3 * '/..')
        global fix_path; del fix_path  # noqa: E702
    fix_path()

from ...storage.files import context_storage
from .constants import URL, PARSED_DIR


def load_page(url):
    """# TODO: docsting."""
    responce = requests.get(url)
    return responce.text


def parse_page(text, parser = 'lxml'):
    """# TODO: docsting."""
    result = None
    soup = BeautifulSoup(text, parser)
    # TODO: parsing
    return result


def save_result(data):
    """# TODO: docstring."""
    context_storage(data)


def main():
    """# TODO: docstring."""
    html = load_page(URL)
    data = parse_page(html)
    save_result(data)


if is_script:
    print("\033[0;32mHello from $DIR_NAME.main function!\033[0m")
    main()
EOT

# Generating parsed data structure
PARSED_DATA_TEMPLATE=$PROJECT_DIR/data/$DIR_NAME
mkdir "$PARSED_DATA_TEMPLATE"
touch "$PARSED_DATA_TEMPLATE"/response.html

printf "\n\033[0;33mTemplate '%s' created successfully.\033[0m\n\n" "${DIR_NAME}"
tree -p "$PARSER_TEMPLATE"
